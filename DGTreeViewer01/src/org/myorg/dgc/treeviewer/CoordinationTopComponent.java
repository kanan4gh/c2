/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.myorg.dgc.treeviewer;

import java.io.IOException;
import java.io.Serializable;
import java.util.logging.Logger;
import org.dg.util.ContentChangeEvent;
import org.dg.util.ContentChangeListener;
import org.dg.util.DGLogger;
import org.myorg.dgc.api.Camera;
import org.openide.cookies.InstanceCookie;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileSystem;
import org.openide.filesystems.Repository;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
final class CoordinationTopComponent extends TopComponent implements ContentChangeListener {

    private static CoordinationTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "CoordinationTopComponent";

    private CoordinationTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(CoordinationTopComponent.class, "CTL_CoordinationTopComponent"));
        setToolTipText(NbBundle.getMessage(CoordinationTopComponent.class, "HINT_CoordinationTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jComboBox2 = new javax.swing.JComboBox();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(160, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(271, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    // End of variables declaration//GEN-END:variables

    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link #findInstance}.
     */
    public static synchronized CoordinationTopComponent getDefault() {
        if (instance == null) {
            instance = new CoordinationTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the CoordinationTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized CoordinationTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(CoordinationTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof CoordinationTopComponent) {
            return (CoordinationTopComponent) win;
        }
        Logger.getLogger(CoordinationTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public String getDisplayName() {
        return super.getDisplayName();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void componentOpened() {
        DGLogger.getDefault().println("ここでカメラを全部探す");
        //ツリービューでは開かれるたびにカメラがデシリアライズされていく。
        //しかしこの時点で全てのツリーが開かれているわけではない。
        updateCameraComboBox();
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 11", "Item 21", "Item 31", "Item 41"}));
        EquipmentManager.getDefault().addCameraContentChangeListener(this);
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public void contentChange(ContentChangeEvent evt) {
        updateCameraComboBox();
    }

    private void updateCameraComboBox() {
        Camera[] cameras = EquipmentManager.getDefault().getCameras();
        String[] items = new String[cameras.length];
        for (int i = 0; i < cameras.length; i++) {
            items[i] = cameras[i].getName();
        }
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(items));
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return CoordinationTopComponent.getDefault();
        }
    }
}
